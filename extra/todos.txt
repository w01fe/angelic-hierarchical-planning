Topic
- [-] Partially ordered planning
	- [ ] In general, could avoid progression explosion - just hook up causal links...
	- [ ] What if we only allow certain kinds of interleaving, i.e., disallow *destructive* interleaving. 
		- [ ] Eliminate recursive ugliness I thought about earlier
		- [ ] Each description has maintenance condition, as long as not violated by interleaving, we can't do worse.
	- [-] Or, do totally ordered planning, but with backwards chaining / causal links.  Or just don't allow interleaving.
		- [+] Looks more or less like constraint-based planning, except commitment, etc.
		- [ ] Can also incorporate EBL techniques, in a HLA-centered way.  
* [-] Realistic domains
- [-] Hybrid Planning
	- [+] Think hard about what makes a "useful" action.
	- [+] Think more about hybrid convergence
	* [-]  LPs multiply exponentially with number of times something put on
	  single surface (e.g., table?)
	- [+] How to properly use pessimistic descriptions?
	- [+] State abstraction hierarchy for suboptimal search (find feasible solution, then look at #s.)
- [ ] EBL / State abstraction / FOL
	- [ ] Have another look at Biundo works
	- [ ] Think about connection between hierarchical methods and first-order
	theorem proving.  Pessimistic descriptions are not pure logical
	statements ?! 
- [ ] Lazy
	- [ ]   Relation between "lazy" state estimation and truth criteria, etc. 
* [+] Misc thoughts
- [-] Code TODOs
	* [-] Hybrid
	- [ ] Misc
		- [ ] Warehouse hierarchy doesn't allow move(b,c,c), which could be needed to get
		through tall stack. 
		- [ ] Check up on forall conditions in NCSTRIPS.
		- [ ] Add handling of guaranteed objects to smart-csps, so we can use
		foralls in preconditions.
		- [ ] Fix regression for simple valuations ?
		- [ ] Handle duplicate plans properly in full graph.
- [ ] Hierarchy synthesis
	- [ ] Ideas on probabilistic descriptions, synthesis, starting with flat
	hierarchy, learning descriptions, macros, hierarchies bottom up.
	Useful HLAs are ones with high success probability, low computational
	complexity.   All of these things are context-sensitive, can be
	imprecise, except for solid opt/pess descriptions.  
- [ ] LATER
	* [ ] Meta-level
	* [ ] Automatic heuristic generation
	- [ ] Probabilistic planning
	- [ ] First order representations
	* [ ] IPC domains (first start?)
	- [ ] Generalization - encapsulate all planning algorithms in our approach (as Stuart said)
	* [ ] General - Hierarchies and control knowledge
	* [ ] Better representations
