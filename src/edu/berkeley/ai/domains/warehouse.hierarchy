;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Warehouse hierarchy -- assumes all goals are Ons.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (hierarchy warehouse)
  (:type :strips-hierarchy)

  (:hla act
       :parameters   ()
       :refinement   (;:precondition (forall (?b - block ?c - block) (goal-on ?b ?c) (on ?b ?c)) TODO?
		      :expansion ())
       :refinement   (:expansion ((move-block :?cx :?cy :?b :?from :?to :?bx :?by :?tox :?toy :?abovetoy)
				  (act)))    
       :optimistic   (:opt 0)
       :pessimistic  (:pess))

  (:hla move-block
       :parameters (?cx - xc ?cy - yc ?b - block ?from - block ?to - block 
		    ?bx - xc ?by - yc ?tox - xc ?toy - yc ?abovetoy - yc)
       :precondition (and (gripperat ?cx ?cy) (gripperempty)
			  (clear ?b) (clear ?to) (on ?b ?from)
			  (blockat ?b ?bx ?by) (blockat ?to ?tox ?toy)
			  (above ?abovetoy ?toy))
       :refinement (:expansion ((navigate ?cx ?cy :?pux ?by :?topy) (get-r ?b ?from ?bx :?pux ?by)
				(navigate :?pux ?by :?pdx ?abovetoy :?topy) (put-r ?b ?to ?tox :?pdx ?toy ?abovetoy)))
       :refinement (:expansion ((navigate ?cx ?cy :?pux ?by :?topy) (get-r ?b ?from ?bx :?pux ?by)
				(navigate :?pux ?by :?pdx ?abovetoy :?topy) (put-l ?b ?to ?tox :?pdx ?toy ?abovetoy)))
       :refinement (:expansion ((navigate ?cx ?cy :?pux ?by :?topy) (get-l ?b ?from ?bx :?pux ?by)
				(navigate :?pux ?by :?pdx ?abovetoy :?topy) (put-r ?b ?to ?tox :?pdx ?toy ?abovetoy)))
       :refinement (:expansion ((navigate ?cx ?cy :?pux ?by :?topy) (get-l ?b ?from ?bx :?pux ?by)
				(navigate :?pux ?by :?pdx ?abovetoy :?topy) (put-l ?b ?to ?tox :?pdx ?toy ?abovetoy)))
       :optimistic  (:ncstrips (:effect (and (not (on ?b ?from)) (on ?b ?to) (not (clear ?to)) (clear ?from)
					     (not (blockat ?b ?bx ?by)) (blockat ?b ?tox ?abovetoy)
					     (not (someblockat ?bx ?by)) (someblockat ?tox ?abovetoy)
					     )
				:possible-effect (and (not (facingright)) (facingright)
						      (not (gripperat ?cx ?cy))
						      (forall (?pdx - xc) (left-of ?pdx ?tox) (gripperat ?pdx ?abovetoy))
						      (forall (?pdx - xc) (left-of ?tox ?pdx) (gripperat ?pdx ?abovetoy)))
				:cost-expr 2
				))
       :pessimistic (:pess))

  (:hla navigate       
       :parameters (?cx - xc ?cy - yc ?dx - xc ?dy - yc ?topy - yc)
       :precondition (topy ?topy)
       :refinement (:expansion ((nav ?cx ?cy ?dx ?dy ?topy)))
       :refinement (:precondition (facingright)
		    :expansion ((nav ?cx ?cy ?cx ?topy ?topy) (turn-l ?cx ?topy) (nav ?cx ?topy ?dx ?dy ?topy)))
       :refinement (:precondition (not (facingright))
		    :expansion ((nav ?cx ?cy ?cx ?topy ?topy) (turn-r ?cx ?topy) (nav ?cx ?topy ?dx ?dy ?topy)))
       :optimistic  (:ncstrips (:effect (and (gripperat ?dx ?dy) (not (gripperat ?cx ?cy)))
				:possible-effect (and (not (facingright)) (facingright))
			        :cost-expr (+ (util/symbol-abs-diff ?dx ?cx 1)
					      (util/symbol-abs-diff ?dy ?cy 1))))
       :pessimistic (:ncstrips (:precondition (and (not (someblockat ?dx ?dy))
					      (forall (?x - xc) (and) (not (someblockat ?x ?topy))))
				:effect (and (gripperat ?dx ?dy) (not (gripperat ?cx ?cy)))
				:possible-effect (and (not (facingright)) (facingright))
			        :cost-expr (+ 1
					      (util/symbol-abs-diff ?dx ?cx 1)
					      (util/symbol-abs-diff ?cy ?topy 1)
					      (util/symbol-abs-diff ?dy ?topy 1)))))       

  (:hla nav       
       :parameters (?cx - xc ?cy - yc ?dx - xc ?dy - yc ?topy - yc)
       :refinement (:precondition (gripperat ?dx ?dy) :expansion ())
       :refinement (:expansion ((left  ?cx :? ?cy) (nav :? ?cy ?dx ?dy ?topy)))
       :refinement (:expansion ((up    ?cx ?cy :?) (nav ?cx :? ?dx ?dy ?topy)))
       :refinement (:expansion ((down  ?cx ?cy :?) (nav ?cx :? ?dx ?dy ?topy)))
       :refinement (:expansion ((right ?cx :? ?cy) (nav :? ?cy ?dx ?dy ?topy)))
       :optimistic  (:ncstrips (:effect (and (gripperat ?dx ?dy) (not (gripperat ?cx ?cy)))
			        :cost-expr (+ (util/symbol-abs-diff ?dx ?cx 1)
					      (util/symbol-abs-diff ?dy ?cy 1))))
       :pessimistic (:ncstrips (:precondition (and (not (someblockat ?dx ?dy))
					      (forall (?x - xc) (and) (not (someblockat ?x ?topy))))
                                :effect (and (gripperat ?dx ?dy) (not (gripperat ?cx ?cy)))
			        :cost-expr (+ (util/symbol-abs-diff ?dx ?cx 1)
					      (util/symbol-abs-diff ?cy ?topy 1)
					      (util/symbol-abs-diff ?dy ?topy 1))))))

