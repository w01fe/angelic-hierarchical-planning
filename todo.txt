For WW hierarchy, need forall in 3 places:
 ncstrips precond, ncstrips effect, refinement precondition
 Can drop last by making special ":goal" precondition, or just ignoring it 
 
 Move-block should not take position argument :(.  Need vars in NCSTRIPS after all.
 
 TODO: combine constant-simplify and instantiate; possibly get rid of instantiate alogether (after a bit of experimentation)
   (this will break current ncstrips)
  
 
 
 What do var bindings mean?
 May as well be one set per effect
 Do we evaluate the effect once per binding??
  Types of mentions (outside of forall)
    precon
 
 
 For NCStrips, want one CSP per clause??
 
; Make WW hierarchy

; make WW heuristics ?

; Threaded timing infrastructure.

Graph search
 ; Doing lower bounds too will slow down
  ; Would like to know when descriptions are exact ...? Meh
 ;  Must care about hierarchical preconds of rest of plan too :(
 
Merging nodes - do it iff rest of plan is the same ??
 ; Generalizes right-recursive thing.
 ; Can't actually prune easily, since states will be same
 ; Without pruning, this will end up with being everywhere at once -- slow!
   ; After progressing through *just next HLA*, may collapse, and can prune!!
     ; But this is just graph ? ? 
     ; Except: can save on plan suffix comparisions (push out list?) .....

; Add abstract lookahead trees. 

; Add AHA* and AHSS ...

; Add weighted A* or that version I saw at ICAPS?

  
------------------------------------
From earlier meeting

- Bruce Donald ? ?? ?
- Continuous blocks
- Logistics
- Tourism

- fuel+time varaible-mpg navigation!

- Merging / splitting

Progression-free planning, with bhaskara's hierarchy (and JIt progression?)

--------------- next ---------------

Look at state estimation
  - Stuart + Eyal or Satish
  - Hector Levesque  
  - Sheila McIlraith.
Have a setting where it's obviously more efficient to do it this way.

Totem destroyer.

Planning graph with HLAs (big state spaces)

------------------------------------

Almost done with warehouse hierarchy
 - Blind (graph) search solves "hard" example instance in 2 seconds ...
 - Almost hard to compete -- move-block = max w * h * 4 states.

How much to follow existing implementation ? 
  (hierarchy, etc.)
Some design choices may not make sense in my optimized implementation
  (number of params, etc.)

What should we shoot for for journal paper?
 - Continuous
 - AADD
....
Stuart's view of continuous.
smart bisection
cell decomposition planners are angelic.
freespace
assembly or construction?  Where you can't separate the two problems.

Email about domains.

------------------------------------
 
; TODO: too many instantiations?!
     ; Allow vars in NCSTRIPS (reduce #), and/or 
     ; !!! IF REFS don't depend on it, shouldn't be a var.
        or something.

randomize refinement ordering ??

longer term 
 - planning graph (+ relaxed)

 - warehouse world
  - forall in ncstrips precondition
 
 - quantified effects, etc.  

 - AADDs.

 - variables in ncstrips, effects and costs

 - add propositional-domain, propositional-instance interfaces?

 - Extend DNF valuations to keep track of unaries?
  ( and only include things in clauses where needed?)

 - Tiebreaking?


Efficiency
  Progression cache  (only 25% for now, skip)
   ; Superseded by graph search?
   ; Let descriptions do caching, or do within top-down-forward-search?
     ; Would capture restrict too
     ; Possible issue: differing hierarchical preconditions
   ; Cache instantiated NCStrips descriptions?
   ;  (allow identityhashmap...
  
 
 - Refinement cache? (i.e., JIT grounding)?

 - Combine refinement CSPs to save on making pred-maps
 - Use keyset in smart-csp filter-pos-domains when integrated- save 10%
 
 ; TODO: can we avoid making a full pass through valuation?
   i.e., just need to check a single square for no block!!
   (combination of on-demand and ...)
    But can't determine position right now without full pass.
    Would need predicate-indexed form...
    ; Right now, we do directly test against atoms when progressing...
 
 

; Observation - constant simplifier doesn't help too much when
 you have ref generator

; Idea: angelic iwthout sets of states, just state abstraction?!

; Merge iff right-recursive ??
  
