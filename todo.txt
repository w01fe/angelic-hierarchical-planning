Fix optimistic descriptions (heuristics) for DRT, NCStrips (with cost
params -- must account for in regression!)

New graph formulation for ALG
hierarchical preconditions -> bhaskara  (lots more spurious states).

Now, there are a number of other improvements possible, which will result in an algorithm that looks more like a depth-first implementation of a best-first search.

- Cache best child

 - Going backwards, keep track of the reward of the second-best path. 

 - After refining a node, instead of returning directly to the root, progress forward along the optimal state sequence.  If at any point the progressed valuation assigns the regressed state a reward corresponding to a plan at least as good as the second-best path, call backwards-pass starting at this node.

 - At the other end, cache the max-gap for the current state sequence going forward from the root.  If, during a backwards pass, you hit the cached state sequence and the current max-gap is > the cached one, stop going backwards and refine right away.

 - Incremental progression/merging.  It should be possible to progress only "diffs" going forward, since usually only small changes will have been made to the valuations.  This will probably be very important if the valuations get very large.  Similar indexing may allow more efficiently finding the best precursor (for OR-nodes) and the best regressed state (for AND-nodes).

- Incremental expansion.

- How can we make use of pessimistic descriptions??

Split-set for ALG

Pessimistic for ALG.

Fancier PDF display ?

Check what happens with no refinements

TODO: cut things out of graph!!

If doing fancy valuation tricks, much watch out for
identitydescrpition, conditional, ...

Might as well store provenance too, for regression ...
... and implement incremental progression/merging?
 -- But problem with provenance is things may be OK even if 
    valuation is out of date, in which case chain is invalid
    ... . . . . ...?

ALGs should have some mode for finding suboptimal plans.

Understanding decomposed planning.

OR-nodes must store: 
	  four optimistic valuations
          two pessimistic valuations
	  two states
          Final progressed 

who picks states ?

Why did we need states in the first place?
 Could refine HLA with biggest gap,
 Best option already known. 
 - Need it to make consistent "best" choices at OR-nodes.

We can get away with regressing only states, not sets.
Question: when a val changes, how can we repair optimal path????

Formulate as ALT with two types of nodes: progress node and merge
node.

(Clauses record provenance.  Assume optimsitic consistency.  rewards
always go down.  Can only affect some subest of progressed results.
By decreasing reward by x for decreased by x, or by anything for
killed state.)

; Smarter way to compare vectors of rewards in subsumption ...


Ideas on probabilistic descriptions, synthesis, starting with flat
hierarchy, learning descriptions, macros, hierarchies bottom up.
Useful HLAs are ones with high success probability, low computational
complexity.   All of these things are context-sensitive, can be
imprecise, except for solid opt/pess descriptions.  

TODO: figure out what to do with forall conditions in NCSTRIPS.

